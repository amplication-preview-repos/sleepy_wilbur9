/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GmailAccountService } from "../gmailAccount.service";
import { GmailAccountCreateInput } from "./GmailAccountCreateInput";
import { GmailAccount } from "./GmailAccount";
import { GmailAccountFindManyArgs } from "./GmailAccountFindManyArgs";
import { GmailAccountWhereUniqueInput } from "./GmailAccountWhereUniqueInput";
import { GmailAccountUpdateInput } from "./GmailAccountUpdateInput";

export class GmailAccountControllerBase {
  constructor(protected readonly service: GmailAccountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GmailAccount })
  async createGmailAccount(
    @common.Body() data: GmailAccountCreateInput
  ): Promise<GmailAccount> {
    return await this.service.createGmailAccount({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        password: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GmailAccount] })
  @ApiNestedQuery(GmailAccountFindManyArgs)
  async gmailAccounts(@common.Req() request: Request): Promise<GmailAccount[]> {
    const args = plainToClass(GmailAccountFindManyArgs, request.query);
    return this.service.gmailAccounts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        password: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gmailAccount(
    @common.Param() params: GmailAccountWhereUniqueInput
  ): Promise<GmailAccount | null> {
    const result = await this.service.gmailAccount({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        email: true,
        password: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGmailAccount(
    @common.Param() params: GmailAccountWhereUniqueInput,
    @common.Body() data: GmailAccountUpdateInput
  ): Promise<GmailAccount | null> {
    try {
      return await this.service.updateGmailAccount({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GmailAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGmailAccount(
    @common.Param() params: GmailAccountWhereUniqueInput
  ): Promise<GmailAccount | null> {
    try {
      return await this.service.deleteGmailAccount({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          email: true,
          password: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
