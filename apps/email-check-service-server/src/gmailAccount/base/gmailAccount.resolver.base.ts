/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GmailAccount } from "./GmailAccount";
import { GmailAccountCountArgs } from "./GmailAccountCountArgs";
import { GmailAccountFindManyArgs } from "./GmailAccountFindManyArgs";
import { GmailAccountFindUniqueArgs } from "./GmailAccountFindUniqueArgs";
import { CreateGmailAccountArgs } from "./CreateGmailAccountArgs";
import { UpdateGmailAccountArgs } from "./UpdateGmailAccountArgs";
import { DeleteGmailAccountArgs } from "./DeleteGmailAccountArgs";
import { GmailAccountService } from "../gmailAccount.service";
@graphql.Resolver(() => GmailAccount)
export class GmailAccountResolverBase {
  constructor(protected readonly service: GmailAccountService) {}

  async _gmailAccountsMeta(
    @graphql.Args() args: GmailAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GmailAccount])
  async gmailAccounts(
    @graphql.Args() args: GmailAccountFindManyArgs
  ): Promise<GmailAccount[]> {
    return this.service.gmailAccounts(args);
  }

  @graphql.Query(() => GmailAccount, { nullable: true })
  async gmailAccount(
    @graphql.Args() args: GmailAccountFindUniqueArgs
  ): Promise<GmailAccount | null> {
    const result = await this.service.gmailAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GmailAccount)
  async createGmailAccount(
    @graphql.Args() args: CreateGmailAccountArgs
  ): Promise<GmailAccount> {
    return await this.service.createGmailAccount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GmailAccount)
  async updateGmailAccount(
    @graphql.Args() args: UpdateGmailAccountArgs
  ): Promise<GmailAccount | null> {
    try {
      return await this.service.updateGmailAccount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GmailAccount)
  async deleteGmailAccount(
    @graphql.Args() args: DeleteGmailAccountArgs
  ): Promise<GmailAccount | null> {
    try {
      return await this.service.deleteGmailAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
