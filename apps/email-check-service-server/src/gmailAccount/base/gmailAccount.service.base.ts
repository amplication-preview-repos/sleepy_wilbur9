/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GmailAccount as PrismaGmailAccount } from "@prisma/client";

export class GmailAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GmailAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gmailAccount.count(args);
  }

  async gmailAccounts(
    args: Prisma.GmailAccountFindManyArgs
  ): Promise<PrismaGmailAccount[]> {
    return this.prisma.gmailAccount.findMany(args);
  }
  async gmailAccount(
    args: Prisma.GmailAccountFindUniqueArgs
  ): Promise<PrismaGmailAccount | null> {
    return this.prisma.gmailAccount.findUnique(args);
  }
  async createGmailAccount(
    args: Prisma.GmailAccountCreateArgs
  ): Promise<PrismaGmailAccount> {
    return this.prisma.gmailAccount.create(args);
  }
  async updateGmailAccount(
    args: Prisma.GmailAccountUpdateArgs
  ): Promise<PrismaGmailAccount> {
    return this.prisma.gmailAccount.update(args);
  }
  async deleteGmailAccount(
    args: Prisma.GmailAccountDeleteArgs
  ): Promise<PrismaGmailAccount> {
    return this.prisma.gmailAccount.delete(args);
  }
}
